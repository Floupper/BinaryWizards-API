// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Quizzes {
  quiz_id     String   @id
  title       String
  description String
  difficulty  String
  type        Int      @default(0)
  created_at  DateTime @default(now())

  questions   Questions[]
  games       Games[]
  user        Users?      @relation(fields: [userUser_id], references: [user_id])
  userUser_id String?
}

model Questions {
  question_id         String    @id @default(uuid())
  question_index      Int
  question_text       String
  question_category   String
  question_difficulty String
  question_type       String  // 'text', 'image', 'audio'
  quizzes             Quizzes   @relation(fields: [quizzesQuiz_id], references: [quiz_id])
  quizzesQuiz_id      String
  options             Options[]
  answers             Answers[]
}

model Options {
  option_id         String    @id @default(uuid())
  option_index      Int
  is_correct_answer Boolean
  answers           Answers[]

  questions                      Questions?      @relation(fields: [questionsQuestion_id], references: [question_id])
  questionsQuestion_id           String
  option_content                 OptionContents? @relation(fields: [optionContentsOptionContent_id], references: [optionContent_id])
  optionContentsOptionContent_id String?
}

model Answers {
  answer_id            String    @id @default(uuid())
  options              Options   @relation(fields: [optionsOption_id], references: [option_id])
  optionsOption_id     String
  questions            Questions @relation(fields: [questionsQuestion_id], references: [question_id])
  questionsQuestion_id String
  games                Games     @relation(fields: [gamesGame_id], references: [game_id])
  gamesGame_id         String
  Users                Users?    @relation(fields: [usersUser_id], references: [user_id])
  usersUser_id         String?
}

model Users {
  user_id    String    @id @default(uuid())
  email      String?   @unique
  username   String    @unique
  password   String
  quizzes    Quizzes[]
  games      Games[]
  created_at DateTime  @default(now())
  teams      Teams[]
  answers    Answers[]
}

model Games {
  game_id                String    @id
  current_question_index Int
  created_at             DateTime  @default(now())
  answers                Answers[]
  quizzes                Quizzes   @relation(fields: [quizzesQuiz_id], references: [quiz_id])
  quizzesQuiz_id         String
  user                   Users?    @relation(fields: [userUser_id], references: [user_id])
  userUser_id            String?

  mode             String // 'standard', 'time', 'scrum', 'team'
  difficulty_level String? // 'facile', 'moyen', 'difficile' (for 'time' and 'team')
  max_players      Int? // For 'scrum'
  teams            Teams[] // For 'team'

  status              String    @default("pending") // 'pending', 'started', 'finished'
  question_start_time DateTime? // Start time of the current question for time and team modes
}

model OptionContents {
  optionContent_id String    @id @default(uuid())
  content          String // URL for images/sounds or text for textuel answers
  options          Options[]
}

model Teams {
  team_id      String  @id @default(uuid())
  name         String
  games        Games   @relation(fields: [gamesGame_id], references: [game_id])
  gamesGame_id String
  players      Users[]
}
